#!/usr/bin/python3
"""Base Module For Air BnB Console."""
import models
from uuid import uuid4
from datetime import datetime


class BaseModel:
    """
    Base Class of AirBnb Console.
    """

    def __init__(self, *args, **kwargs):
        """Init of Object
            Attributes:
                id(string) Random Generated by 'uuid4:(method Randome)'
                Created_at(str):Auto Generated
                    by datetime module now(get current time)
                Updated_at(str):Auto Generated by datetime and
                    generated again when object modified
                    by adding it to method that change object like save.
        """
        self.id = str(uuid4())
        tform = "%Y-%m-%dT%H:%M:%S.%f"
        self.created_at = datetime.today()
        self.updated_at = datetime.today()
        if len(kwargs) != 0:
            for q, a in kwargs.items():
                if q == "created_at" or q == "updated_at":
                    self.__dict__[q] = datetime.strptime(a, tform)
                else:
                    self.__dict__[q] = a
        else:
            models.storage.new(self)


    def __str__(self):
        """
        print the instance
        """
        return "[{:s}] ({:s}) {}".format(self.__class__.__name__, self.id,
                                         self.__dict__)


    def to_dict(self):
        """convert  self dict and other public instance
                Return: Dictionary
        """
        rdict = self.__dict__.copy()
        rdict["created_at"] = self.created_at.isoformat()
        rdict["updated_at"] = self.updated_at.isoformat()
        rdict["__class__"] = self.__class__.__name__
        return rdict


    def save(self):
        """
        for now just update update_at
        """
        self.updated_at = datetime.today()
        models.storage.save()
